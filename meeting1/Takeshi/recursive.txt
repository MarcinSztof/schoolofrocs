public class Solution
{
    private int[][] matrix;
    private int[][] memo;
    
    private void Init(int rows, int cols)
    {
        memo = new int[rows][];
        for (var i = 0; i < rows; i++)
        {
            memo[i] = new int[cols];
            for (var k = 0; k < cols; k++)
            {
                memo[i][k] = -1;
            }
        }        
    }
    
    private int MPS(int row, int col)
    {
        var result = memo[row][col];
        
        if (result > 0)
        {
            return result;
        }
        
        result = matrix[row][col];
        
        if (row == 0)
        {
            if (col > 0)
            {
                result += MPS(row, col - 1);
            }
        }
        else
        {
            if (col == 0)
            {
                result += MPS(row - 1, col);
            }
            else
            {
                result += Math.Min(MPS(row - 1, col), MPS(row, col - 1));
            }
        }
        
        memo[row][col] = result;
        return result;
    }
    
    public int MinPathSum(int[][] grid)
    {
        matrix = grid;
        var rows = grid.Length;
        var cols = grid[0].Length;
        Init(rows, cols);
        return MPS(rows - 1, cols - 1);
    }
}